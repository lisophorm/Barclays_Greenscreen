<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 creationComplete="initialise(event)" xmlns:calibrator="views.components.calibrator.*" remove="group1_removeHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import com.alfo.chroma.Chromagic;
			import com.alfo.utils.ChromaPrefs;
			import com.alfo.utils.ImageFactory;
			import com.roguedevelopment.objecthandles.Flex4ChildManager;
			import com.roguedevelopment.objecthandles.Flex4HandleFactory;
			import com.roguedevelopment.objecthandles.HandleDefinitions;
			import com.roguedevelopment.objecthandles.HandleDescription;
			import com.roguedevelopment.objecthandles.HandleRoles;
			import com.roguedevelopment.objecthandles.ObjectHandles;
			import com.roguedevelopment.objecthandles.constraints.MaintainProportionConstraint;
			import com.roguedevelopment.objecthandles.constraints.MovementConstraint;
			import com.roguedevelopment.objecthandles.decorators.AlignmentDecorator;
			import com.roguedevelopment.objecthandles.decorators.DecoratorManager;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import events.CameraEvent;
			import events.ViewEvent;
			
			import flashx.textLayout.factory.TruncationOptions;
			
			import model.Settings;
			import model.TeamModel;
			
			[Bindable]
			private var settings:Settings;
			
			[Bindable] protected var trophyModel:SimpleDataModel = new SimpleDataModel();
			[Bindable] protected var cropModel:SimpleDataModel = new SimpleDataModel();
			[Bindable] protected var bckCutModel:SimpleDataModel = new SimpleDataModel();	
			
			protected var objectHandles:ObjectHandles;
			protected var decoratorManager:DecoratorManager;
			
			private var chromaPrefs:ChromaPrefs;
			private var teamModel:TeamModel;
			private var mouseZero:Point;
			private var webcamViewZero:Point;
			
			private var testImage:ImageCapture;
			
			private var chroma:Chromagic = new Chromagic();
			
			private var finalPreview:BitmapData;
			
			private var imageFactory:ImageFactory;
			
			public function initialise(event : FlexEvent):void
			{
				
				imageFactory=new ImageFactory(800,600,1);
				
				chromaPrefs=ChromaPrefs.getInstance();
				
				var constraint2:MovementConstraint = new MovementConstraint();
				constraint2.minX = 0;
				constraint2.minY = 0;
				constraint2.maxX = 800;
				constraint2.maxY = 600;
				
				var propConstraint:MaintainProportionConstraint=new MaintainProportionConstraint();
				
				
				finalPreview=new BitmapData(800,600,true);
				objectHandles = new ObjectHandles( mainGroup , 
					null, 
					new Flex4HandleFactory() , 
					new Flex4ChildManager() );
				
				trace("i sm hrtr");
				
				cropModel.x = chromaPrefs.cropX;
				cropModel.y = chromaPrefs.cropY;
				cropModel.width = chromaPrefs.cropWidth;
				cropModel.height = chromaPrefs.cropHeight
				
				trophyModel.x = chromaPrefs.cupX;
				trophyModel.y = chromaPrefs.cupY;
				trophyModel.width = chromaPrefs.cupWidth;
				trophyModel.height = chromaPrefs.cupHeight;
				
				chromaSettings.Hue = chromaPrefs.Hue;
				chromaSettings.Saturation = chromaPrefs.Saturation;
				chromaSettings.Tolerance=chromaPrefs.Tolerance;
				chromaSettings.MinValue = chromaPrefs.MinValue;
				chromaSettings.MaxValue = chromaPrefs.MaxValue;
				
				chromaSettings.crossHairX=chromaPrefs.colorPickerX;
				chromaSettings.crossHairY=chromaPrefs.colorPickerY;
				chromaSettings.autoColor=chromaPrefs.autoColor;
				
				//flexModel1.isLocked = true;
				objectHandles.registerComponent(cropModel,cropWiew, HandleDefinitions.NO_ROTATE_DEFINITION,true);
				objectHandles.registerComponent(trophyModel,trophyView, HandleDefinitions.NO_ROTATE_DEFINITION,true,[propConstraint]);
				//objectHandles.addDefaultConstraint(new MaintainProportionConstraint());
				objectHandles.addDefaultConstraint( constraint2 );
				
				
				decoratorManager = new DecoratorManager( objectHandles, drawingLayer );
				decoratorManager.addDecorator( new AlignmentDecorator() );

				
				settings = Settings.instance;
				teamModel = TeamModel.instance;
				
				var cupFilename : String = teamModel.teamList[0].cupImage;
				
				var backgroundImageName : String = teamModel.teamList[0].backgroundImage;
				
				var backgroundFile:File= File.applicationDirectory.resolvePath("assets"+File.separator+"images"+File.separator+"clubs"+File.separator+"backgrounds" + File.separator + backgroundImageName);				
				var file : File = File.applicationDirectory.resolvePath("assets"+File.separator+"images"+File.separator+"clubs"+File.separator+"cups" + File.separator + cupFilename);
				var url : String = file.url;
				
				backgroundImage.source=backgroundFile.url;
				
				trophyView.setTrophyImage(url);
				
				webcamContainer.addEventListener(MouseEvent.MOUSE_DOWN, webcamMouseDownHandler);
				addEventListener(MouseEvent.MOUSE_UP, webcamMouseUpHandler);
				
				webcamView.initialise(800, 600);
				
				//slider.thumb.width = slider.thumb.height = 20;
			}
			
			protected function webcamMouseDownHandler(event : MouseEvent) : void
			{
				webcamContainer.addEventListener(MouseEvent.MOUSE_MOVE, webcamMouseMoveHandler);
				mouseZero = new Point(webcamContainer.mouseX, webcamContainer.mouseY);
				webcamViewZero = new Point(webcamView.x, webcamView.y);
			}
			
			protected function endDrag():void
			{
				webcamContainer.removeEventListener(MouseEvent.MOUSE_MOVE, webcamMouseMoveHandler);
			}
			
			protected function webcamMouseUpHandler(event : MouseEvent) : void
			{
				endDrag();
			}
			
			protected function webcamMouseMoveHandler(event : MouseEvent) : void
			{	
				var translation : Point = new Point(mouseZero.x - webcamContainer.mouseX, mouseZero.y - webcamContainer.mouseY);
				var newPosition : Point = new Point(webcamViewZero.x - translation.x, webcamViewZero.y - translation.y);
				
				webcamView.x = webcamViewZero.x - translation.x;
				webcamView.y = webcamViewZero.y - translation.y;
			}
			
			protected function saveSettingsClickHandler(event : MouseEvent) : void
			{
				trace("save settings"+trophyModel.x+" y:"+trophyModel.y);

				//dataArray[2] = slider.value;
				/*dataArray[3] = trophyView.container.x;
				dataArray[4] = trophyView.container.y;
				dataArray[5] = trophyView.handle.x;
				dataArray[6] = trophyView.handle.y;*/
				chromaPrefs.cropX = cropModel.x;
				chromaPrefs.cropY = cropModel.y;
				chromaPrefs.cropWidth = cropModel.width;
				chromaPrefs.cropHeight = cropModel.height;
				
				chromaPrefs.cupX = trophyModel.x;
				chromaPrefs.cupY = trophyModel.y;
				chromaPrefs.cupWidth = trophyModel.width;
				chromaPrefs.cupHeight = trophyModel.height;
				
				chromaPrefs.Hue = chromaSettings.Hue;
				chromaPrefs.Saturation = chromaSettings.Saturation;
				chromaPrefs.Tolerance = chromaSettings.Tolerance;
				chromaPrefs.MinValue = chromaSettings.MinValue;
				chromaPrefs.MaxValue = chromaSettings.MaxValue;
				chromaPrefs.colorPickerX=chromaSettings.crossHairX;
				chromaPrefs.colorPickerY=chromaSettings.crossHairY;
				chromaPrefs.autoColor=chromaSettings.autoColor;
				chromaPrefs.saveXMLPrefs();
				this.parentApplication.dispatchEvent( new ViewEvent(ViewEvent.LOCATION_RESTART ));
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				imageFactory.crop=new Rectangle(cropModel.x,cropModel.y,cropModel.width,cropModel.height);
				imageFactory.trophy=new Rectangle(trophyModel.x,trophyModel.y,trophyView.scaleX,trophyView.scaleY);
				

				objectHandles.selectionManager.clearSelection();

				var photo:BitmapData=webcamView.grabImage();

				trace("trophy x:"+trophyModel.x);
				trace("trophy x:"+trophyView.scaleX);
				trace("trophy height:"+trophyModel.height);
				if(chromaSettings.autoColor==1) {
					trace("colorpicker x:"+chromaSettings.crossHairX+"y:"+chromaSettings.crossHairY);
					var hsv:Vector.<Number>=imageFactory.colorPicker(chromaSettings.crossHairX,chromaSettings.crossHairY,webcamView.grabImage());
					trace("hue is:"+hsv[0]);
					imageFactory.Hue=hsv[0]*360;
					trace("hue is:"+imageFactory.Hue);
				} else {
					imageFactory.Hue=chromaSettings.Hue;
					trace("hue is:"+imageFactory.Hue);
				}
				imageFactory.Saturation=chromaSettings.Saturation;
				imageFactory.Tolerance=chromaSettings.Tolerance;
				imageFactory.MinValue=chromaSettings.MinValue;
				imageFactory.MaxValue=chromaSettings.MaxValue;
				finalImage.source=imageFactory.processImage(photo,trophyView.trophyImage.bitmapData,backgroundImage);
				finalImage.visible=true;
				drawingLayer.visible=false;
				photo.dispose();
				photo=null;

			}
			
			protected function trophyView_COMPLETEHandler(event:CameraEvent):void
			{
				trace("******** CALIBRATOR TROPHY LOADED");
				trophyModel.width = chromaPrefs.cupWidth;
				trophyModel.height = chromaPrefs.cupHeight;
				
				
			}
			
			protected function group1_removeHandler(event:FlexEvent):void
			{
				trace("*********** removed calibrator");
				
			}
			
			protected function tryAgainBtn_clickHandler(event:MouseEvent):void
			{
				finalImage.visible=false;
				drawingLayer.visible=true;
			}
			
			protected function webcamView_clickHandler(event:MouseEvent):void
			{
				trace("webcam surface clicked x:"+webcamView.mouseX+" y:"+webcamView.mouseY);
				var hsv:Vector.<Number>=imageFactory.colorPicker(webcamView.mouseX,webcamView.mouseY,webcamView.grabImage());
				trace("hsv:"+hsv[0]+"-"+hsv[1]+"-"+hsv[2]);
				chromaSettings.Hue=	hsv[0]*360;
				chromaSettings.Saturation=hsv[1]/2;
				chromaSettings.crossHairX=webcamView.mouseX;
				chromaSettings.crossHairY=webcamView.mouseY;
			}
			
			protected function cropWiew_clickHandler(event:MouseEvent):void
			{
				trace("crop clicked x:"+webcamView.mouseX+" y:"+webcamView.mouseY);
				var hsv:Vector.<Number>=imageFactory.colorPicker(webcamView.mouseX,webcamView.mouseY,webcamView.grabImage());
				trace("hsv:"+hsv[0]+"-"+hsv[1]+"-"+hsv[2]);
				chromaSettings.Hue=	hsv[0]*360;
				chromaSettings.Saturation=hsv[1]/2;
				chromaSettings.crossHairX=webcamView.mouseX;
				chromaSettings.crossHairY=webcamView.mouseY;
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
	</s:layout>
	<s:Image id="backgroundImage" width="800" height="600" visible="false" includeInLayout="false" />
	<s:Spacer height="60"/>
	
	<s:HGroup>
		
	
	<s:Group id="mainGroup">
		<s:SpriteVisualElement width="100%" height="100%" id="drawingLayer" />
		<s:Group width="{settings.calibratorViewWidth}" height="{settings.calibratorViewHeight}" id="webcamContainer">
			<calibrator:WebcamView id="webcamView" mask="{webcamMask}" click="webcamView_clickHandler(event)"/>
			<s:Group id="webcamMask" width="100%" height="100%">
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="0x900000"/>
					</s:fill>
				</s:Rect>
			</s:Group>
			<s:Rect width="100%" height="100%">
				<s:stroke>
					<s:SolidColorStroke color="0xFFFFFF" weight="1"/>
				</s:stroke>
			</s:Rect>
		</s:Group>
		<calibrator:RectCropView id="cropWiew" model="{cropModel}" click="cropWiew_clickHandler(event)" />
		<calibrator:TrophyView id="trophyView" model="{trophyModel}" COMPLETE="trophyView_COMPLETEHandler(event)" />
		<s:BitmapImage width="100%" height="100%" id="finalImage" scaleMode="zoom" smooth="true" visible="false"  />
	</s:Group >
	<calibrator:ChromaSliders id="chromaSettings" />
	</s:HGroup>
	<s:Spacer height="30"/>
	<!--s:HSlider id="slider" width="{settings.cameraViewWidth}"
			   snapInterval="0" minimum="1" maximum="4" change="{webcamView.zoomView(slider.value)}"/-->
	<s:HGroup>
		<s:Button label="test" click="button1_clickHandler(event)" />
		<s:Button click="saveSettingsClickHandler(event)" label="save"/>
		<s:Button id="tryAgainBtn" label="try again" click="tryAgainBtn_clickHandler(event)"  />
	</s:HGroup>

</s:Group>