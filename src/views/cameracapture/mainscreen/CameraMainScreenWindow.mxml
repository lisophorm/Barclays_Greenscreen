<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:mainscreen="views.cameracapture.mainscreen.*"
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)" 
		 remove="removedHandler(event)"
		 xmlns:layout="org.osmf.layout.*">
	
	<fx:Script>
		<![CDATA[
			import com.alfo.utils.ChromaPrefs;
			import com.alfo.utils.GreenScreenPrefs;
			import com.alfo.utils.ImageFactory;
			import com.alfo.utils.PictureWatcher;
			import com.alfo.utils.WatchEvent;
			import com.greensock.TweenMax;
			import com.leeburrows.encoders.AsyncJPGEncoder;
			import com.leeburrows.encoders.supportClasses.AsyncImageEncoderEvent;
			
			import events.BitmapCapturedEvent;
			import events.CameraCaptureEvent;
			import events.KioskError;
			import events.KioskProgressEvent;
			import events.ViewEvent;
			
			import model.Settings;
			import model.TeamModel;
			
			import views.cameracapture.secondscreen.CameraSecondScreenWindow;
			
			private var loader:URLLoader;
			
			private var greenScreenPrefs:GreenScreenPrefs = new GreenScreenPrefs();
			private var finalWatch:PictureWatcher;
			private var folderWatch:PictureWatcher;
			private var settings:Settings;
			private var teamModel:TeamModel;
			
			private var uploadFile:File;
			private var urlRequest:URLRequest;
			
			private var imageFactory:ImageFactory;
			private var photo:BitmapData;
			private var completeImage:BitmapData;
			private var chromaPrefs:ChromaPrefs;
			
			private var imageByteArray : ByteArray;
			
			private var pngEncoder:AsyncJPGEncoder;
			
			[Bindable]
			private var cameraWindow:CameraSecondScreenWindow;
			
			protected function creationCompleteHandler(event : Event):void
			{
				addEventListener(Event.INIT, init);
			}
			
			public function init(event : Event):void
			{
				
				pngEncoder = new AsyncJPGEncoder(85);
				pngEncoder.addEventListener(AsyncImageEncoderEvent.COMPLETE,savePicture);
				pngEncoder.addEventListener(AsyncImageEncoderEvent.PROGRESS,encodeProgressHandler);
				
				urlRequest= new URLRequest(this.parentApplication.localURL+"uploader.php");
				
				trace("begin of camera: upload url "+urlRequest.url);
				
				currentState = "instruction";
				
				teamModel = TeamModel.instance;
				
				settings = Settings.instance;
				
				imageFactory=new ImageFactory(800,600,1);
				chromaPrefs=ChromaPrefs.getInstance();
				
				var cupFilename : String = teamModel.teamList[settings.userData.teamID].cupImage;
				var backgroundImageName : String = teamModel.teamList[settings.userData.teamID].backgroundImage;
				
				var backgroundFile:File= File.applicationDirectory.resolvePath("assets"+File.separator+"images"+File.separator+"clubs"+File.separator+"backgrounds" + File.separator + backgroundImageName);				
				var file : File = File.applicationDirectory.resolvePath("assets"+File.separator+"images"+File.separator+"clubs"+File.separator+"cups" + File.separator + cupFilename);

				backgroundImage.source=backgroundFile.url;
				trophyImage.source=file.url;
				
				var file : File = File.desktopDirectory.resolvePath("calibrator/settings/appSettings.txt");
				
				loader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, settingsLoadCompleteHandler);
				loader.load(new URLRequest(file.url));
			}
			
			protected function savePicture(e:AsyncImageEncoderEvent) {
				trace("******** png encode complete");
				var file : File;
				
				file  = File.documentsDirectory.resolvePath("trophy_photos");
				
				if(!file.exists) {
					try {
						file.createDirectory();
					} catch (e:Error) {
						this.parentApplication.dispatchEvent( new KioskError(KioskError.ERROR, "Error creating temp directory \r\n"+file.nativePath+"\r\n"+e.message, "I/O Error" ) );
					}
				}

				
				file=File.documentsDirectory.resolvePath("trophy_photos"+File.separator+settings.userData.imageID + ".jpg");
				
				var stream : FileStream = new FileStream();
				stream.open(file, FileMode.WRITE);
				stream.writeBytes(pngEncoder.encodedBytes);
				stream.close();
				
				
				
				uploadPhoto();
				
				
			}

			
			private function encodeProgressHandler(event:AsyncImageEncoderEvent):void
			{

				trace("encoding progress:", Math.floor(event.percentComplete)+"% complete");
			}
			
			public function settingsLoadCompleteHandler(event : Event):void
			{
				settings.cameraSettings = String(loader.data).split("|");

				var secondscreen:Number=0;
				for(var i:Number=0;i<Screen.screens.length;i++) 
				{
					if(Screen.screens[i].visibleBounds.left != Screen.mainScreen.visibleBounds.left) {
						secondscreen=i;
					}
				}
				cameraWindow=new CameraSecondScreenWindow();
				cameraWindow.open();
				cameraWindow.alwaysInFront=true;
				cameraWindow.move(Screen.screens[secondscreen].visibleBounds.left,Screen.screens[secondscreen].visibleBounds.top);
				cameraWindow.width=Screen.screens[secondscreen].visibleBounds.width;
				cameraWindow.height=Screen.screens[secondscreen].visibleBounds.height;
				cameraWindow.currentState = "instruction";
				cameraWindow.addEventListener(BitmapCapturedEvent.BITMAP_CAPTURED, bitmapCapturedHandler);
			}
			
			protected function bitmapCapturedHandler(event : BitmapCapturedEvent):void
			{
				var trophyscalex:Number=chromaPrefs.cupWidth/trophyImage.width

				//trophyImage.invalidateSize();
				trace("trophy image scalex:"+trophyscalex);
				trace("CameraMainScreenWindow :: bitmapCapturedHandler :: " + event.bitmapData.width + " :: " + event.bitmapData.height);
				imageFactory.crop=new Rectangle(chromaPrefs.cropX,chromaPrefs.cropY,chromaPrefs.cropWidth,chromaPrefs.cropHeight);
				imageFactory.trophy=new Rectangle(chromaPrefs.cupX,chromaPrefs.cupY,trophyscalex,trophyscalex);
				
				var scale:Number = imageFactory.finalW/event.bitmapData.width;
				var photoMatrix:Matrix = new Matrix();
				photoMatrix.scale(scale, scale);
				
				var photo:BitmapData=new BitmapData(imageFactory.finalW,imageFactory.finalH,true);
				photo.draw(event.bitmapData,photoMatrix,null,null,null,true);
				
				if(chromaPrefs.autoColor==1) {
					trace("colorpicker x:"+chromaPrefs.colorPickerX+"y:"+chromaPrefs.colorPickerY);
					var hsv:Vector.<Number>=imageFactory.colorPicker(chromaPrefs.colorPickerX,chromaPrefs.colorPickerY,photo);
					trace("hue is:"+hsv[0]);
					imageFactory.Hue=hsv[0]*360;
					trace("hue is:"+imageFactory.Hue);
				} else {
					imageFactory.Hue=chromaPrefs.Hue;
					trace("hue is:"+imageFactory.Hue);
				}
				imageFactory.Saturation=chromaPrefs.Saturation;
				imageFactory.Tolerance=chromaPrefs.Tolerance;
				imageFactory.MinValue=chromaPrefs.MinValue;
				imageFactory.MaxValue=chromaPrefs.MaxValue;
				// completeImage=
				imageFactory.processImage(photo,trophyImage.bitmapData,backgroundImage);
				imageFactory.addEventListener(Event.COMPLETE,displayFinalPhotoDelayed);

				//photo.dispose();
				//photo=null;
				
				
			}
			
			protected function updateCountdown(event:CameraCaptureEvent):void
			{
				if(cameraWindow)
				{
					cameraWindow.updateCountdownDisplay(event);
				}
			}
			
			protected function instructionContinueHandler(event:CameraCaptureEvent):void
			{
				photoCaptureStartHandler();
				currentState='countdown';
			}
			
			protected function photoCaptureStartHandler():void
			{
				writeURN();
				emptyCaptures();
				if (greenScreenPrefs.basePath!=null && greenScreenPrefs.photoShopPath!=null)
				{					
					// watches for the canon camera photos
					folderWatch=new PictureWatcher();
					folderWatch.setWatchFolder(greenScreenPrefs.basePath + File.separator + "captures");
					folderWatch.addEventListener(WatchEvent.ON_ADD_PHOTO,compositImage);
					folderWatch.startWatch();
					
					// photoShop output Folder
					finalWatch=new PictureWatcher();
					finalWatch.setWatchFolder(greenScreenPrefs.basePath + File.separator + "output");
					finalWatch.addEventListener(WatchEvent.ON_ADD_PHOTO,displayFinalPhoto);
				}
			}
			
			public function removedHandler(event : Event):void
			{
				if(cameraWindow)
				{
					cameraWindow.close();
					cameraWindow = null;
				}
			}
			
			protected function retakeHandler(event : CameraCaptureEvent):void
			{
				//var oldPhoto:File=File.applicationDirectory.resolvePath(greenScreenPrefs.basePath + File.separator + "output" + File.separator + settings.userData.imageID + ".jpg");
				//oldPhoto.deleteFile();
				photoCaptureStartHandler();
				currentState="countdown";
			}
			
			protected function cameraCompleteHandler(event:CameraCaptureEvent):void
			{
				
				uploadFile.removeEventListener(Event.COMPLETE,uploadCompleteHandler);
				uploadFile.removeEventListener(Event.OPEN,openUploadHandler);
				uploadFile.removeEventListener(DataEvent.UPLOAD_COMPLETE_DATA,uploadDataComplete);
				uploadFile.removeEventListener(ProgressEvent.PROGRESS,updateProgress);
				uploadFile.removeEventListener(IOErrorEvent.IO_ERROR,onFileError);
				
				this.parentApplication.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
			}
			
			protected function writeURN():void
			{
				
			}
			
			protected function compositImage(event : WatchEvent):void
			{
				trace("**** dispatchged compositImage");
			}
			
			protected function displayFinalPhoto(evt:WatchEvent):void 
			{
				TweenMax.delayedCall(1, displayFinalPhotoDelayed);
			}
			
			protected function displayFinalPhotoDelayed(e:Event=null):void
			{
				finalWatch.stopWatch();
				
				currentState = "result";
				this.invalidateDisplayList();
				cameraWindow.setResultImage(null);
				mainScreenResult.imageURL = null;
				cameraWindow.setResultImage(ImageFactory.background);
				mainScreenResult.imageURL = ImageFactory.background;
			}
			
			protected function emptyCaptures():void 
			{
				if (greenScreenPrefs.basePath!=null)
				{
					var dir : File = File.applicationDirectory.resolvePath(greenScreenPrefs.basePath + File.separator + "captures");
					dir.deleteDirectory(true);
					dir.createDirectory();
					
					dir = File.applicationDirectory.resolvePath(greenScreenPrefs.basePath + File.separator + "tmp");
					dir.deleteDirectory(true);
					dir.createDirectory();
					
//					dir = File.applicationDirectory.resolvePath(greenScreenPrefs.basePath + File.separator + "output");
//					dir.deleteDirectory(true);
//					dir.createDirectory();
				}
			}
			
			protected function exit( e:Event = null ):void
			{
				if(photo) {
					photo.dispose();
					photo=null;
				}
				tidy();
			}
			
			// called when exiting from the component
			protected function tidy(e:Event = null):void
			{				
			
				
				finalWatch.removeEventListener(WatchEvent.ON_ADD_PHOTO, displayFinalPhoto);
				finalWatch.stopWatch();

			}
			
			private function startEncoding():void {
				pngEncoder.start(ImageFactory.background);
				this.parentApplication.dispatchEvent( new KioskProgressEvent(KioskProgressEvent.NOTIFY, "Please wait..." ) );
			}
			
			protected function uploadPhoto():void {
				trace("uploading photo...");
				
				uploadFile = File.documentsDirectory.resolvePath("trophy_photos"+File.separator+settings.userData.imageID + ".jpg");
				if(uploadFile.exists) {
					trace("*************** greenscreen file is here");
				} else {
					trace("No greenscreen file");
				}
				
				uploadFile.addEventListener(Event.COMPLETE,uploadCompleteHandler);
				uploadFile.addEventListener(Event.OPEN,openUploadHandler);
				uploadFile.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,uploadDataComplete);
				uploadFile.addEventListener(ProgressEvent.PROGRESS,updateProgress);
				uploadFile.addEventListener(IOErrorEvent.IO_ERROR,onFileError);
				uploadFile.upload(urlRequest);
				//
			}
			
			protected function uploadDataComplete(event:DataEvent):Boolean
			{
				
				try {
					var result:XML = new XML(event.data);
				} catch (e:Error) {
					this.parentApplication.dispatchEvent( new KioskError(KioskError.ERROR, e.message+"\r\n"+event.data.toString(), "Malformed xml result" ) );
					return false;
				}
				trace("result from upload:"+result.toString());
				trace("message:"+result.message);
				trace("status:"+result.status);
				if(result.status!="OK") {
					this.parentApplication.dispatchEvent( new KioskError(KioskError.ERROR, result.message, "Problem after file upload" ) );
				} else {
					currentState='thankyou';
				}
				return true;
			}
			protected function openUploadHandler(event:Event):void
			{
				trace("uploading");
				//statusText.text = "Uploading...";
			}
			
			protected function onFileError(error:IOErrorEvent) :void {
				this.parentApplication.dispatchEvent( new KioskError(KioskError.ERROR, error.text.toString(), "I/O error while uploading the file" ) );
				
			}
			protected function updateProgress(event:ProgressEvent):void {
				var perc:Number=Math.round(event.bytesLoaded*100/event.bytesTotal);
				this.parentApplication.dispatchEvent( new KioskProgressEvent(KioskProgressEvent.UPDATE, String(perc)+"% complete"));
			}
			
			protected function uploadCompleteHandler(event:Event):void
			{
				this.parentApplication.dispatchEvent( new KioskProgressEvent( KioskProgressEvent.UPDATE_COMPLETE ));
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="instruction"/>
		<s:State name="countdown" enterState="{cameraWindow.currentState='countdown'}"/>
		<s:State name="wait" enterState="{cameraWindow.currentState='wait'}"/>
		<s:State name="result" enterState="{cameraWindow.currentState='result'}"/>
		<s:State name="thankyou" enterState="{cameraWindow.currentState='thankyou'}"/>
	</s:states>
	<s:Image id="backgroundImage" width="800" height="600" visible="false" includeInLayout="false" />
	<s:BitmapImage smooth="true" id="trophyImage" visible="false"  />
	<mainscreen:CameraMainScreenInstructionView nextScreen="{instructionContinueHandler(event)}" includeIn="instruction"/>
	<mainscreen:CameraMainScreenCountdownView nextScreen="{currentState='wait'}" 
											  tick="{updateCountdown(event)}" includeIn="countdown"/>
	<!--mainscreen:CameraMainScreenCountdownView nextScreen="{currentState='result'}" 
											  tick="{updateCountdown(event)}" includeIn="countdown"/-->
	<mainscreen:CameraMainScreenWaitView includeIn="wait"/>
	<mainscreen:CameraMainScreenResultView id="mainScreenResult" includeIn="result" retake="retakeHandler(event)" nextScreen="{startEncoding()}"/>
	<mainscreen:CameraMainScreenThankyouView includeIn="thankyou" cameraComplete="cameraCompleteHandler(event)"/>
</s:Group>
