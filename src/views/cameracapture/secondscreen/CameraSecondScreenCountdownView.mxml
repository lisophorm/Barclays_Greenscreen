<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:model="model.*"
		 addedToStage="addedToStageHandler(event)" 
		 removedFromStage="removedFromStageHandler(event)"
		 width="100%" height="100%" xmlns:calibrator="views.components.calibrator.*">
	
	<fx:Metadata>
		[Event(name="COMPLETE", type="events.CameraEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.alfo.utils.GreenScreenPrefs;
			import com.greensock.TimelineMax;
			import com.greensock.TweenMax;
			
			import flash.utils.setInterval;
			
			import model.Settings;
			import model.TeamModel;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import views.components.calibrator.ImageCapture;
			
			[Bindable]
			private var settings:Settings;
			
			[Bindable]
			public var countdownValue:int;
			
			private var greenScreenPrefs:GreenScreenPrefs = new GreenScreenPrefs();
			private var teamModel:TeamModel;
			
			/* NEW !!
			public function addedToStageHandler(event : Event) : void
			{
				settings = Settings.instance;
				teamModel = TeamModel.instance;
				
				var settingsFile : File = File.desktopDirectory.resolvePath("settings.txt");
				var stream : FileStream = new FileStream();
				stream.open(settingsFile, FileMode.READ);
				var dataString : String = stream.readUTFBytes(stream.bytesAvailable);
				var dataArray : Array = dataString.split(",");
				
				stream.close();
				
				var cupFilename : String = teamModel.teamList[0].cupImage;
				var file : File = File.applicationDirectory.resolvePath(greenScreenPrefs.basePath+File.separator+"clubs"+File.separator+"cups" + File.separator + cupFilename);
				var url : String = file.url;
				
				trophyImage.source = url;
				
				webcamView.initialise(settings.cameraViewWidth, settings.cameraViewHeight);
				
				webcamView.x = dataArray[0];
				webcamView.y = dataArray[1];
				webcamView.zoomView(dataArray[2]);
				
				trophyImage.x = dataArray[3];
				trophyImage.y = dataArray[4];
				trophyImage.width = dataArray[5];
				trophyImage.height = dataArray[6];
			}
			*/
			public function takePhoto():void
			{
//				var outputPath : String = greenScreenPrefs.basePath+File.separator + "captures" + File.separator + "capture.jpg";
//				var captureRectangle : Rectangle = new Rectangle(0, 0, 500, 300);
//				var imageCapture : ImageCapture = new ImageCapture(outputPath, captureRectangle);
//				webcamView.captureImage(imageCapture);
				
				//var timeline : TimelineMax = new TimelineMax();
				//timeline.append(new TweenMax(cameraFlash, .3, {alpha:1, glowFilter:{color:0xFFFFFF, alpha:1, blurX:20, blurY:20}}));
				//timeline.append(new TweenMax(cameraFlash, 1.2, {alpha:0, delay:.3, glowFilter:{color:0xFFFFFF, alpha:0, blurX:0, blurY:0}}));
			}
			
			
			public function addedToStageHandler(event:Event):void
			{
				settings = Settings.instance;
				
				cameraDevice.init();
				
				cameraMask_resizeHandler();
				
				teamModel = TeamModel.instance;
				
				var cupFilename : String = teamModel.teamList[settings.userData.teamID].cupImage;
				var file : File = File.applicationDirectory.resolvePath(greenScreenPrefs.basePath + File.separator + 
									"clubs" + File.separator + "cups" + File.separator + cupFilename);
				var url : String = file.url;
				
				cupImage.source = url;
			}

			public function removedFromStageHandler(event:Event):void
			{
				cameraDevice.destroy();
			}
			
			protected function cameraMask_resizeHandler(event:ResizeEvent=null):void
			{
				var ratioH:Number=cameraMask.width/800;
				var ratioV:Number=cameraMask.height/600;
				
				if(settings) {
					cupImage.x = (settings.cameraSettings[9]-(settings.cameraSettings[11]/2))*ratioH;
					cupImage.y =  (settings.cameraSettings[10]-(settings.cameraSettings[12]/2))*ratioV;
					cupImage.width =  settings.cameraSettings[11]*ratioH;
					//busorect.height =  settings.cameraSettings[15]*ratioV;
					//busorect.width =  settings.cameraSettings[16]*ratioH;
					cameraMask.x = settings.cameraSettings[13];
					cameraMask.y = settings.cameraSettings[14];
				}
			}
			
			protected function cameraDevice_creationCompleteHandler(event:FlexEvent):void
			{
				trace("camera complete - width: "+cameraDevice.width+" h:"+cameraDevice.height);				
			}
			
			
			protected function cameraDevice_resizeHandler(event:ResizeEvent):void
			{
				trace("camera resize - width: "+cameraDevice.width+" h:"+cameraDevice.height);				
				
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
	</s:layout>
	<s:Spacer height="60"/>
	
<!--	<s:Group>
		<s:Group width="{settings.cameraViewWidth}" height="{settings.cameraViewHeight}" id="webcamContainer">
			<calibrator:WebcamView id="webcamView" mask="{webcamMask}"/>
			<s:Group id="webcamMask" width="100%" height="100%">
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor color="0x900000"/>
					</s:fill>
				</s:Rect>
			</s:Group>
		</s:Group>
		<s:Image id="trophyImage"/>
	</s:Group> -->
	
	
	<s:Group verticalCenter="0">
		<s:Group width="800" height="600" id="cameraBckg" resize="cameraMask_resizeHandler(event)">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0xcc00cc"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		<model:CameraDevice id="cameraDevice" mask="{cameraMask}" creationComplete="cameraDevice_creationCompleteHandler(event)" resize="cameraDevice_resizeHandler(event)"/>
		<s:Group width="800" height="600" id="cameraMask" resize="cameraMask_resizeHandler(event)"  >
			<s:Rect width="100%" height="100%" id="busorect" >
				<s:fill>
					<s:SolidColor color="0xFFFFFF"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		<s:Image id="cupImage" />
		<s:Rect width="100%" height="100%" id="cameraFlash" alpha="0">
			<s:fill>
				<s:SolidColor color="0xFFFFFF"/>
			</s:fill>
		</s:Rect>
	</s:Group>
	<s:Spacer height="20"/>
	<s:Label id="countdownValueSecond" text="{countdownValue.toString()}"/>
</s:Group>