<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" 
		currentState="default" 
		xmlns:components="views.components.*"  
		remove="exit(event)" 
		creationComplete="created(event)"
		
		>
	
	<fx:Script>
		<![CDATA[
			import com.alfo.utils.EncryptWrapper;
			import com.lia.crypto.AES;
			
			import events.KioskError;
			import events.KioskProgressEvent;
			import events.ViewEvent;
			
			import model.ML;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import views.components.*;
			
			private var urlRequest:URLRequest
			private var file:File;
			
			private var currentURN:String;
			
			private var progressPop:ProgressPopUp;
			protected var fileTransfer:Boolean=false;
			
			[Bindable]
			public var userName:String="";
			
			[Bindable]
			public var posts:int = 0;
			
			[Bindable]
			public var data:Object;
			
			protected var applicationType:int = 0;
			
			public function created(event:FlexEvent=null):void
			{
				this.addEventListener( Event.INIT, init);
			}
			public function init(event:Event=null):void
			{
				trace("*** INIT CAMERACAPTURE ***");
				//facebook_specifics.visible =  this.parentApplication.isFacebookRegistered
				data = this.parentApplication.data
				if (data!=null)
				{
					currentURN = data.urn;
					applicationType = data.type;
					this.currentState = data.facebook ? "facebook" : "default";
					publishPhoto.url = this.parentApplication.baseURL+'publishphoto.php';
					getUser.url = this.parentApplication.baseURL+'getuser.php';
					
					var passVars:Object=new Object;
					passVars.urn=EncryptWrapper.Wrap(currentURN);
					
					// LOOK-UP USER INFO FOR THIS URN
					getUser.send(passVars);
					fileTransfer=false;
				} else {
					trace("URN MISSING");
				}					
				
			}
			protected function exit(e:Event=null):void
			{
				trace("*** EXIT CAMERACAPTURE ***");
			}
			protected function getUser_resultHandler(event:ResultEvent):void
			{
				userName 	= EncryptWrapper.Wrap(getUser.lastResult.name);
				posts 		= int(EncryptWrapper.Wrap(getUser.lastResult.posts));
				if (this.currentState=="facebook")
					facebookposts_check.selected = this.canPost;
				trace("** USER INFO RETRIVED:\nUser's lastname:"+user.text+"\nPosts:"+posts);
			}
			
			protected function httpservice_faultHandler(event:FaultEvent):void
			{
				this.parentApplication.dispatchEvent(new KioskError(KioskError.ERROR, event.fault.faultString, "NETWORK ERROR"));

			}
			

// CAMERA HANDLING
			
			//take a new picture with the camera
			protected function takePhoto(event:MouseEvent):void
			{
				if (CameraUI.isSupported)
				{
					trace("camera is supported");
					var myCam:CameraUI = new CameraUI();
					myCam.launch(MediaType.IMAGE);
					myCam.addEventListener(MediaEvent.COMPLETE,takePhotoCompleteHandler);
				
				}
				else
				{
					trace("camera not supported");
					
					this.parentApplication.dispatchEvent(new KioskError(KioskError.ERROR, "CAMERA NOT SUPPORTED", "DEVICE ERROR"));
					statusText.text = "Camera not supported on this device.";
				}
			}
			
			//select a picture from the camera roll (gallery)
			protected function uploadGallery_clickHandler(event:MouseEvent):void
			{
				if (CameraRoll.supportsBrowseForImage)
				{
					trace("camera roll is supported");
					var roll:CameraRoll = new CameraRoll();
					roll.browseForImage();
					roll.addEventListener(MediaEvent.SELECT,takePhotoCompleteHandler);
				}
				else
				{
					trace("camera roll not supported");
					statusText.text = "Camera roll not supported on this device.";
				}
			}
			
			//when the selection is complete upload it
			protected function takePhotoCompleteHandler(event:MediaEvent):void
			{
				urlRequest = new URLRequest(this.parentApplication.baseURL+"uploader.php");
				trace("event.data.file.url; = "+event.data.file.url);
				takePhotoButton.enabled = false;
				file = event.data.file;
				file.addEventListener(Event.COMPLETE,uploadCompleteHandler);
				file.addEventListener(Event.OPEN,openUploadHandler);
				file.addEventListener(ProgressEvent.PROGRESS,updateProgress);
				file.addEventListener(IOErrorEvent.IO_ERROR,onFileError);
				file.upload(urlRequest);
				fileTransfer=true;
				this.parentApplication.dispatchEvent( new KioskProgressEvent(KioskProgressEvent.NOTIFY, "Uploading file" ) );
			}
			protected function onFileError(error:IOErrorEvent):void
			{
				this.parentApplication.dispatchEvent( new KioskError(KioskError.ERROR, error.text.toString(), "I/O error while uploading the file" ) );
			}
			protected function updateProgress(event:ProgressEvent):void
			{
				var perc:Number=Math.round(event.bytesLoaded*100/event.bytesTotal);
				this.parentApplication.dispatchEvent( new KioskProgressEvent(KioskProgressEvent.UPDATE, String(perc)+"% complete"));
				trace("progress:"+event.bytesLoaded+ "of:"+event.bytesTotal);
			}
			
			protected function uploadCompleteHandler(event:Event):void
			{
				this.parentApplication.dispatchEvent( new KioskProgressEvent( KioskProgressEvent.UPDATE_COMPLETE ));
				trace("upload complete");
				takePhotoButton.enabled = true;
				statusText.text = "Photo Uploaded";
				var passVars:Object=new Object();
				passVars.urn=currentURN;
				passVars.file=basename(file.url);
				
				if (this.currentState=="facebook")
					passVars.facebook_optin= this.facebookposts_check.selected ? 1 : 0;
				else
					passVars.facebook_optin= 0;
				passVars.type = this.applicationType;

				publishPhoto.send(passVars);
				statusText.text = "Publishing on Facebook...";
				this.parentApplication.dispatchEvent( new KioskProgressEvent(KioskProgressEvent.NOTIFY, "Publishing on Facebook..."));
				
			}
			
			
			
			protected function openUploadHandler(event:Event):void
			{
				trace("uploading");
				statusText.text = "Uploading...";
			}
			
			
			public function basename(path:String):String {
				var index:Number = path.lastIndexOf('/');
				if (index != -1) {
					return path.substr(index + 1);
				}
				return path;
			}
			
			protected function publishPhoto_resultHandler(event:ResultEvent):void
			{
				this.parentApplication.dispatchEvent( new KioskProgressEvent( KioskProgressEvent.UPDATE_COMPLETE ));
				if(event.result.result!="SUCCESS") 
				{
					this.parentApplication.dispatchEvent(new KioskError(KioskError.ERROR, event.result.message, "ERROR", restart));
				} else 
				{
					// INCREMENT POSTS BY ONE + 
					posts +=1;
					complete();
				}
			}
			
			protected function complete():void
			{
						this.parentApplication.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME_COMPLETE ) );
			}
			
			
			public function restart(e:Event):void
			{
				this.parentApplication.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ) );
			}
			
			protected function cancelBTN_clickHandler(event:MouseEvent):void
			{
				if(fileTransfer) {
					file.removeEventListener(Event.COMPLETE,uploadCompleteHandler);
					file.removeEventListener(Event.OPEN,openUploadHandler);
					file.removeEventListener(ProgressEvent.PROGRESS,updateProgress);
					file.removeEventListener(IOErrorEvent.IO_ERROR,onFileError);
				}
				this.parentApplication.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
			}
			
			protected function get canPost():Boolean
			{
				
				return (int(posts)<5);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:HTTPService id="publishPhoto" resultFormat="flashvars" method="POST" url="{this.parentApplication.baseURL+'publishphoto.php'}" result="publishPhoto_resultHandler(event)" fault="httpservice_faultHandler(event)" />
		<s:HTTPService id="getUser" resultFormat="flashvars" method="POST" url="{this.parentApplication.baseURL+'getuser.php'}"  result="getUser_resultHandler(event)" fault="httpservice_faultHandler(event)" />
	</fx:Declarations>
	<s:states>
		<s:State name="default" />
		<s:State name="facebook" />
	</s:states>
	<s:VGroup styleName="Game" horizontalAlign="center" verticalAlign="middle" width="100%" height="592">
			<s:VGroup>
				<s:Label id="statusText" />
				<s:HGroup horizontalAlign="left">
					<s:Label width="400" text="Name"/>
					<s:Spacer width="20" />
					<s:Label text="{userName}" id="user"  styleName="userInfo" />
					
				</s:HGroup>
				<s:Spacer height="5" />
				<s:HGroup horizontalAlign="left" includeIn="facebook">
					<s:Label width="400" text="Published Facebook Posts:"/>
					<s:Spacer width="20" />
					<s:Label text="{posts}" id="facebookposts_label" styleName="userInfo" />
					
				</s:HGroup>
				<s:Spacer width="10" height="20"/>
				<s:HGroup>
					<s:CheckBox id="facebookposts_check"  label="Post fo Facebook?" skinClass="skins.vodafoneCheckBox" />
				</s:HGroup>
				<s:Spacer width="10" height="100"/>
				<s:HGroup width="100%" horizontalAlign="center">
					<s:Button id="takePhotoButton" horizontalCenter="0" label="Shoot Photo" click="takePhoto(event)" skinClass="skins.vodafoneButton"/>
				</s:HGroup>
			</s:VGroup>
		</s:VGroup>
	
</s:Group>