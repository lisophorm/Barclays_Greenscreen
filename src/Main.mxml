<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:views="views.*"
					   horizontalCenter="center" width="100%" height="100%"
					   creationComplete="init(event)"  resize="onresize()" backgroundColor="0x000000"
					   addedToStage="fullscreen()" showStatusBar="false">
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			import com.utils.Console;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.filters.DropShadowFilter;
			
			import events.ApplicationEvent;
			import events.GreenscreenModuleEvent;
			import events.KioskError;
			import events.KioskEvent;
			import events.KioskProgressEvent;
			import events.KioskWaitEvent;
			import events.UserEvent;
			import events.ViewEvent;
			
			import model.Config;
			import model.ML;
			import model.MonitorConnection;
			
			import skins.BasicButton;
			import skins.vodafoneFormItem;
			
			import views.ApplicationType;
			import views.CameraCapture;
			import views.FaceBookAuth01;
			import views.GreenScreen;
			import views.RegistrationScan;
			import views.ScoreCapture;
			import views.SelectUserType;
			import views.Thankyou;
			import views.UserForm;
			import views.components.ErrorAlert;
			import views.components.GreenScreenPopUp;
			import views.components.PasswordAlert;
			import views.components.ProgressPopUp;
			import views.components.pleaseWait;
			import views.components.tandcWindow;
			
			
			public var baseURL:String ="";
			public var localURL:String ="";
			public var facebookAppID:String ="";
			public var urn:int = 0;
			public var scoreFormat:String = "99:99"
			public var monitor:MonitorConnection;
			public var password:String;
			protected var pref:Config;
			protected var blinkTimer:Timer;
			public var aespassword:String="";
			public var latitude:Number=0;
			public var longitude:Number=0;
			public var photoCount:Number=0;
			public var videoCount:Number=0;
			public var tabletID:String="";
			
			public var eventLocation:String="";
			
			
			
			public static var APPLICATION_TYPE_REGISTRATION:String	 = "REGISTRATION";
			public static var APPLICATION_TYPE_PHOTO:String			 = "PHOTOCAPTURE";
			public static var APPLICATION_TYPE_GREENSCREEN:String	 = "GREENSCREEN";
			
			public static var APPLICATION_TYPE_GREENSCREEN_CELEBRATE:String	 = "GREENSCREEN_CELEBRATE";
			public static var APPLICATION_TYPE_SIMULATOR:String		 = "SIMULATOR";
			public static var APPLICATION_TYPE_PITSTOP:String		 = "PITSTOP";
			public static var APPLICATION_TYPE_HELMET:String 	     = "HELMET";
			
			[Bindable]
			public var ApplicationType:String						 = "REGISTRATION";
			
			[Bindable]
			public var barcode:String = null;
			
			[Bindable]
			public var score:Number = 0;
			
			[Bindable]
			public var isRegistered:String = "";
			
			protected var optin_marketing:Boolean = false;
			protected var optin_terms:Boolean = false;

			protected var alertbox:ErrorAlert;
			protected var passwordbox:PasswordAlert;
			
			protected var tcWindow:tandcWindow;
			protected var progressWindow:ProgressPopUp;
			protected var greenscreenmoduleWindow:GreenScreenPopUp;
			protected var popupWait:pleaseWait;
			
			public var data:Object = null;
			protected var loggedIn:Boolean = false;
			
			private var skins_vodafoneFormItem_obj:skins.vodafoneFormItem;
			
			protected function fullscreen(e:Event=null):void
			{
				stage.displayState =  StageDisplayState.FULL_SCREEN_INTERACTIVE;
				
				stage.scaleMode = "noScale";
				this.reScaleMainContent();
			}
			protected function reScaleMainContent():void
			{
//				screenScale();
				centerPopups();
				var chromeWidth:int = this.stage.nativeWindow.width - this.stage.stageWidth;
				var chromeHeight:int = this.stage.nativeWindow.height - this.stage.stageHeight;
				navigationbar.width = this.stage.stageWidth
				
				this.holder.scaleX = scale;
				this.holder.scaleY = scale;
			}

			protected function get scale():Number
			{
				return Math.min( 1366/this.stage.stageWidth,  768/this.stage.stageHeight);
			}
			protected function onresize(e:Event=null):void
			{
				trace("*** RESIZE");
				try
				{
					this.reScaleMainContent();
					this.FaceBookAuth01.resizeWebApp();
				} catch (error:Error)
				{
							
				}
			}
				
			/*
			TO DO:
			-- Need to save optins
			-- Check that RegisterView always get wired back up
			-
			
			*/
			protected function init(e:Event = null):void
			{
				
				trace("onApplicationComplete");
				trace(File.applicationDirectory.nativePath);
				
				// navigation bar must be on top
				if (this.getElementIndex( navigationbar )< this.getElementIndex( contentholder) )
				{
					this.swapElements( navigationbar, contentholder);
				}
				
				
				// navigation bar must be on top
				if (this.getElementIndex( navigationbar )< this.getElementIndex( contentholder) )
				{
					this.swapElements( navigationbar, contentholder);
				}

				pref = new Config();
				
				
				baseURL =  "http://"+pref.prefsXML..serverIP+"/";
				localURL= "http://"+pref.prefsXML..localIP+"/";
				password ="ignite123";
				facebookAppID = pref.prefsXML..facebookAppID;
				ApplicationType = pref.prefsXML..applicationtype.toString().toUpperCase();
					
				urn = int(pref.prefsXML..urnLength);
				scoreFormat = pref.prefsXML..scoreFormat;
				Console.log("baseURL: "+baseURL, this);
				Console.log("localURL: "+localURL, this);
				trace("scoreformat is now: "+scoreFormat);
				Console.log("appplicationtype is now: "+ApplicationType, this);
				monitor =  new MonitorConnection(baseURL+"ping.php");			
				
			//	if (!monitor.hasEventListener( MonitorConnection.EVENT_INTERNET_NOT_AVAILABLE))
			//		monitor.addEventListener( MonitorConnection.EVENT_INTERNET_NOT_AVAILABLE, notifyNoInternet);
				
				/*NativeApplication.nativeApplication.idleThreshold = 60;
				if(!NativeApplication.nativeApplication.hasEventListener(Event.USER_IDLE)) {
				NativeApplication.nativeApplication.addEventListener(Event.USER_IDLE, notifyIdle);
				}*/
				
				//if (!monitor.hasEventListener( MonitorConnection.EVENT_USER_IDLE_TIMEOUT))
					//monitor.addEventListener( MonitorConnection.EVENT_USER_IDLE_TIMEOUT, notifyIdle);
				
				NativeApplication.nativeApplication.idleThreshold = 600;
				//Display connect symbol
				blinkTimer = new Timer( 1000 , 0 );
				blinkTimer.addEventListener( "timer" , toggleConnectIcon);
				blinkTimer.start();
				
				this.addEventListener( ApplicationEvent.SAVE_TYPE, notifyApplicationTypeUpdate );
				this.addEventListener( ApplicationEvent.LOGOUT, notifyApplicationLogout );
				
				this.addEventListener( KioskError.ERROR, error );
				
				this.addEventListener( ViewEvent.NAVIGATE, doNavigation );
				this.addEventListener( UserEvent.URN, setBarCode );
				this.addEventListener( UserEvent.REGISTERED, setIsRegistered);
				
				this.addEventListener( KioskEvent.TERMS_NOTIFY, openTermsAndCondtions );
				this.addEventListener( KioskProgressEvent.NOTIFY, notifyProgress );
				this.addEventListener( KioskProgressEvent.UPDATE, notifyProgressUpdate );
				this.addEventListener( KioskProgressEvent.UPDATE_COMPLETE, notifyProgressComplete );
				this.addEventListener( GreenscreenModuleEvent.NOTIFY, notifyGreenScreen );
				this.addEventListener( KioskWaitEvent.NOTIFY, notifyWaiting );
				
				this.addEventListener( UserEvent.OPTIN_MARKETING, setMarketingOptin );
				this.addEventListener( UserEvent.OPTIN_TERMS, setTermsOptin );
			
				
				this.addEventListener( "showDropShadow", showDropshadow );
				this.addEventListener( "hideDropShadow", hideDropshadow );
				
				navigationTimer = new Timer(200, 0);
				navigationTimer.addEventListener( TimerEvent.TIMER, checkNavigationHover );
				navigationTimer.start();

				
			}
			protected var navigationTimer:Timer;
			protected var navigationTimerCount:int=0;
			protected var navigationVisible:Boolean = false;
			protected function checkNavigationHover( e:Event = null ):void
			{
				//	Console.log(this.stage.mouseY+"<"+navigationbar.height+" "+navigationTimerCount, this)
				if (this.stage.mouseY<navigationbar.height)
				{
					navigationTimerCount = Math.min(navigationTimerCount+1,1);
				} else 
				{
					navigationTimerCount = Math.max(navigationTimerCount-1,0); 
				}
				if (navigationTimerCount==1)
				{
					if (!navigationVisible)
					{
						//	Console.log("Show Navigation", this)
						showNavigation();
						navigationVisible = true;
					}
				}
				if (navigationTimerCount==0)
				{
					if (navigationVisible)
					{
						//	Console.log("Hide Navigation", this)
						hideNavigation()
					}
				}
				
			}
			protected function showNavigation( e:Event = null ):void
			{
				navigationVisible = true;
				TweenMax.to( navigationbar, .5, { alpha: 1, y: 0});
			}
			protected function hideNavigation( e:Event = null ):void
			{
				navigationVisible = false;
				TweenMax.to( navigationbar, .5, { alpha: 0, y:-navigationbar.height});
			}

			protected function notifyApplicationTypeUpdate( e:ApplicationEvent ):void
			{

				
				pref.saveApplicationVariables( e.value );
				trace(pref.prefsXML);
				baseURL =  "http://"+pref.prefsXML..serverIP+"/";
				localURL= "http://"+pref.prefsXML..localIP+"/";
				eventLocation=pref.prefsXML..eventlocation;
				facebookAppID = pref.prefsXML..facebookAppID;
				ApplicationType = pref.prefsXML..applicationtype.toString().toUpperCase();
				urn = int(pref.prefsXML..urnLength);
				scoreFormat = pref.prefsXML..scoreFormat;
				trace("scoreformat is now: "+scoreFormat);
				trace("appplicationtype is now: "+ApplicationType);
				this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
			}
			
			protected function clearPopups(e:Event=null):void
			{
				try
				{
					trace("*** CLEARING POPUPS");
					if (greenscreenmoduleWindow!=null)
					{
							PopUpManager.removePopUp(greenscreenmoduleWindow);
					}

					if (alertbox!=null)
					{
						if (!alertbox.isRemoving)
							PopUpManager.removePopUp(alertbox);
						
					}
					if (tcWindow!=null)
					{
						if (!tcWindow.isRemoving)
							PopUpManager.removePopUp(tcWindow);
						
					}
					if (progressWindow!=null)
					{
						PopUpManager.removePopUp(progressWindow);
						
					}
					
					if (popupWait!=null)
					{
						PopUpManager.removePopUp(popupWait);
						
					}
				} catch (error:Error)
				{
					trace("*** Error clearing popup - probably when user presses close:\n"+error.message)
				}
				
			}
			
			protected function notifyWaiting( e:KioskWaitEvent = null ):void
			{
				clearPopups();
				
				popupWait = new pleaseWait();
				popupWait.message = e.message;
				PopUpManager.addPopUp(popupWait, this, true) ;
				PopUpManager.centerPopUp(popupWait);

			}
			protected function notifyApplicationLogout( e:ApplicationEvent ):void
			{
				this.loggedIn = false;
				
			}
			protected function notifyProgressComplete( e:KioskProgressEvent = null):void
			{
				clearPopups();
			}
			protected function notifyProgress( e:KioskProgressEvent = null):void
			{
				
				clearPopups();
				
				progressWindow = new ProgressPopUp();
				progressWindow.windowTitle = e.title;
				progressWindow.message = e.message;
				progressWindow.exitFunction = e.exitFunction;
				
				PopUpManager.addPopUp(progressWindow, this, true);
				PopUpManager.centerPopUp(progressWindow);
			}
			protected function notifyGreenScreen( e:GreenscreenModuleEvent = null ):void
			{
				clearPopups();
				greenscreenmoduleWindow = new GreenScreenPopUp();
				greenscreenmoduleWindow.exitFunctionYes = e.exitFunctionYes;
				greenscreenmoduleWindow.exitFunctionNo = e.exitFunctionNo;
				greenscreenmoduleWindow.photoPath = e.photopath;
				PopUpManager.addPopUp(greenscreenmoduleWindow, this, false) ;
				PopUpManager.centerPopUp(greenscreenmoduleWindow);

			}
			
			protected function notifyProgressUpdate( e:KioskProgressEvent = null):void
			{
				
				
				if (progressWindow==null)
				{
					notifyProgress(e);
					
				} else
				{
					progressWindow.message = e.message;
				}
				
			}
			protected function openTermsAndCondtions( e:KioskEvent = null):void
			{
				trace("openTermsAndCondtions");
				
				clearPopups();
				tcWindow = new tandcWindow();
				tcWindow.exitFunction = e.exitFunction;
				
				PopUpManager.addPopUp(tcWindow, this, true);
				PopUpManager.centerPopUp(tcWindow);
			}
			protected function gotoView( stackStr:String="", obj:Object=null ) :void
			{
				var indexSeq:Array = ["RegisterView", "SelectUserType", "FaceBookAuth01", "UserForm", "SelectTeam","CameraCapture", "ScoreCapture", "TaskCompleteCapture", "GreenScreen","GreenScreenCelebrate", "SelectApplication", "Thankyou", "FaceBookLogoutOverride"]
				var lastScreen:DisplayObject;
				var nextScreen:DisplayObject;
				var nextIndex:int=-1;
				try
				{
					 lastScreen = (VBox(this.Stack.getChildAt(this.Stack.selectedIndex)).getChildAt(0));
					
				//	lastScreen.dispatchEvent( new Event("exit"));
				} catch (error:Error)
					
				{
					
				}
				for (var i:int=0;i<indexSeq.length;i++)
				{
					if	(indexSeq[i]==stackStr)
					{
						data = obj;
						nextIndex = i;
						if (stackStr == "RegisterView")
						{
							nextScreen = RegisterView;
						}
						if (stackStr == "SelectUserType")
						{
							nextScreen = SelectUserType;
						}
						if (stackStr == "FaceBookAuth01")
						{
							nextScreen = FaceBookAuth01;
						}
						if (stackStr == "UserForm")
						{
							nextScreen = UserForm;
						}
						if (stackStr == "SelectTeam")
						{
							nextScreen = SelectTeam;
						}

						if (stackStr == "CameraCapture")
						{
							nextScreen = CameraCapture;
						}
						if (stackStr == "ScoreCapture")
						{
							nextScreen = ScoreCapture;
						}
						if (stackStr == "TaskCompleteCapture")
						{
							nextScreen = TaskCompleteCapture;
						}
						if (stackStr == "GreenScreen")
						{
							nextScreen = GreenScreen;
						}
						if (stackStr == "GreenScreenCelebrate")
						{
							nextScreen = GreenScreenCelebrate;
						}

						if (stackStr == "SelectApplication")
						{
							nextScreen = SelectApplication;
						}
						if (stackStr == "Thankyou")
						{
							nextScreen = Thankyou;
						}
						if (stackStr == "FaceBookLogoutOverride")
						{
							nextScreen = FaceBookLogoutOverride;
						}

					}
				}
				
				if (stackStr=="Previous")
				{
					gotoView( indexSeq[ Stack.selectedIndex-1], obj );
				}
				// ENSURE LAST SCREEN CALLS EXIT
				if (lastScreen!=null)
				{
					trace("We are dispatching an EXIT event to "+getQualifiedClassName(lastScreen));	
					lastScreen.dispatchEvent( new FlexEvent(FlexEvent.REMOVE));
				}
				// ENSURE NEXT SCREEN CALLS INIT
				if (nextScreen!=null)
				{
					Console.log("We dispatching an INIT event to "+getQualifiedClassName(nextScreen), this);
					nextScreen.dispatchEvent( new Event( Event.INIT ) );
					
				}
				// GO TO NEXT STACK ITEM
				if (nextIndex>-1)
				{
					Stack.selectedIndex = nextIndex;
				}
			}
			protected function deleteWindowsCookies():void {
				if (flash.system.Capabilities.os.indexOf("Windows")!=-1)
				{
					var file:File=File.applicationDirectory.resolvePath("C:/WINDOWS/System32/rundll32.exe");
					var nativeProcessInfo:NativeProcessStartupInfo=new NativeProcessStartupInfo();
					nativeProcessInfo.executable=file;
					nativeProcessInfo.arguments=new <String>["InetCpl.cpl, ClearMyTracksByProcess 255"];
				
					var process:NativeProcess=new NativeProcess();
					process.start(nativeProcessInfo);
				}
			}
			//NAVIGATION HANDLING BETWEEN VIEWS
			protected function doNavigation(e:ViewEvent):void
			{
				Console.log("doNavigation:"+e.location, this);
				clearPopups();
				hideDropshadow();
				switch (e.location)
				{
					case ViewEvent.LOCATION_RESTART:
						//this.navigator.popToFirstView(fadeTrans);
						trace("*** RESTART WAS CALLED ***");
						deleteWindowsCookies();
						gotoView("RegisterView");
						//gotoView("SelectUserType")
						//gotoView("UserForm");
						//gotoView("SelectTeam", {urn: "10002021"})
						//gotoView("CameraCapture", {urn: "10002021"})
						//gotoView("Thankyou", {urn: "10002021"})
						//this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_FACEBOOK ));
						
						break;
					case ViewEvent.LOCATION_CONFIG:
						gotoView("SelectApplication", { xml : pref.prefsXML } );
						break;
					case ViewEvent.LOCATION_SELECT_USER_TYPE:
						if (this.isRegistered)
						{
							if (this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
							{
								
								showError("YOU HAVE ALREADY REGISTERED.", "USER REGISTERED");
								RegisterView.init();
							} else 
							{
								this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
							}
						} else
						{
							gotoView("SelectUserType");
						}
						break;
					case ViewEvent.LOCATION_FACEBOOK:
						if (!isFacebookRegistered)
						{
							gotoView("FaceBookAuth01", {urn: barcode, optin_marketing: this.optin_marketing, optin_terms: this.optin_terms});
						} else
						{
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
						}
						break;
					case ViewEvent.LOCATION_STANDARD_REGISTRATION:
						if (!isStandardRegistered)
						{
							gotoView("UserForm", {urn: barcode, optin_marketing: this.optin_marketing, optin_terms: this.optin_terms});
						} else
						{
							
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
							
						}
						break;
					case ViewEvent.LOCATION_FACEBOOK_FORCELOGOUT:
						gotoView("FaceBookLogoutOverride",  e.object);
							
						break;
					
					case ViewEvent.LOCATION_FACEBOOK_REGISTERED:
						trace("User has registered on facebook");
						this.dispatchEvent( new UserEvent(UserEvent.REGISTERED, "facebook"));
						this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_SELECT_TEAM ));
						//this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_REGISTRATION_COMPLETE ));
						
						//	this.navigator.pushView(views.ExtraInfo, {urn: barcode});
						break;
					case ViewEvent.LOCATION_SELECT_TEAM:
						trace("Select your team");
						var data:Object = e.object;
						if (data!=null)
						{
							data.urn = barcode;
						} else {
							data = {urn: barcode};
						}
						gotoView("SelectTeam",  data);
						break;
					case ViewEvent.LOCATION_TEAM_SELECTED:
						trace("Attempting to pop current view from NavigationView");
						gotoView("Previous");
						break;
					case ViewEvent.LOCATION_REGISTRATION_COMPLETE:
						trace("Registration of user is complete");
						
						if (this.ApplicationType == APPLICATION_TYPE_REGISTRATION)
						{
							gotoView("Thankyou", {urn: barcode});
						} else
						{
							//gotoView("Thankyou", {urn: barcode});
							this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_GAME ));
						}
						
						break;
					case ViewEvent.LOCATION_GAME:
						
						
						trace("ENTERING THE GAME "+ApplicationType);
						if (ApplicationType == APPLICATION_TYPE_PHOTO)
						{
							//gotoView("CameraCapture", {urn: barcode, type: ApplicationTypeNumber, facebook: this.isFacebookRegistered});
							
							if (true || this.isFacebookRegistered)
							{
								gotoView("CameraCapture", {urn: barcode, type: ApplicationTypeNumber, facebook: this.isFacebookRegistered});
							} else
							{
								gotoView("RegisterView");
								showError("USER NOT REGISTERED WITH FACEBOOK ACCOUNT", "FACEBOOK ACCOUNT REQUIRED", this.defaultView);
							}
							
						} else if  (ApplicationType == APPLICATION_TYPE_PITSTOP || ApplicationType == APPLICATION_TYPE_SIMULATOR)
						{
							trace(":"+this.activityTitle);
							gotoView("ScoreCapture", {urn: barcode, type: ApplicationTypeNumber, facebook: this.isFacebookRegistered, activityTitle: this.activityTitle, scoreFormat: this.scoreFormat});
							
						} else if  (ApplicationType == APPLICATION_TYPE_GREENSCREEN)
						{
							gotoView("GreenScreen", {urn: barcode, type: ApplicationTypeNumber,typename:ApplicationType, facebook: this.isFacebookRegistered});
							
						} else if  (ApplicationType == APPLICATION_TYPE_GREENSCREEN_CELEBRATE)
						{
							gotoView("GreenScreenCelebrate", {urn: barcode, type: ApplicationTypeNumber, typename:ApplicationType,  facebook: this.isFacebookRegistered});
						}  else if  (ApplicationType == APPLICATION_TYPE_HELMET)
						{
							
							
							//showError("GAME: BRAND AMBASSADOR TAKES NOTES DOWN WHEN USER COMPLETES AN ACTIVITY", "NOT IMPLEMENTED");
							gotoView("TaskCompleteCapture",  {urn: barcode, type: ApplicationTypeNumber, facebook: this.isFacebookRegistered});
							
						} else 
						{
							gotoView("RegisterView");
							showError("UNKNOWN ACTIVTIY", "NOT IMPLEMENTED");
							
						}
						break;
					case ViewEvent.LOCATION_GAME_COMPLETE:
						gotoView("Thankyou");
						break;
					default:
						
				}
				
				
				
			}
			protected function error(e:KioskError=null):void
			{
				trace("Error: "+e.message);
				showError(e.message, e.title, e.exitFunction);
			}
			protected function toggleConnectIcon(e:Event):void
			{
				if ( connStatus.visible )
				{            
					connStatus.visible = false;                
				} else if (!monitor.isConnected()) 
				{            
					connStatus.visible = true;                
				}      
			}
			
			protected function notifyIdle(e:Event):void
			{
				//defaultState();
				defaultView();
				trace("Idle too long - resetting");
			}
			protected function notifyNoInternet(e:Event):void
			{
				
				//defaultState();
				defaultView();
				monitor.removeEventListener( MonitorConnection.EVENT_INTERNET_NOT_AVAILABLE, notifyNoInternet);
				monitor.addEventListener( MonitorConnection.EVENT_INTERNET_AVAILABLE, notifyInternet);
				showError("SORRY - NO INTERNET CONNECTION", "CONNECTION ERROR");
			}
			protected function notifyInternet(e:Event):void
			{
				monitor.addEventListener( MonitorConnection.EVENT_INTERNET_NOT_AVAILABLE, notifyNoInternet);
				monitor.removeEventListener( MonitorConnection.EVENT_INTERNET_AVAILABLE, notifyInternet);
				
				
				if (alertbox!=null)
				{
					if (alertbox.windowTitle == "CONNECTION ERROR")
					{
						PopUpManager.removePopUp(alertbox);
						/*
						if (currentState == "Scan")
						{
						if (highscore!=null)
						{
						highscore.init();
						}
						}
						*/
					}
				}
				
			}
			protected function showError(msg:String="", title:String="", exitFunction:Function=null):void
			{
				//Alert.show(msg, title, 4, null, exitApplicationFunction);
				
				clearPopups();
				alertbox = new ErrorAlert();
				alertbox.message = msg;
				alertbox.windowTitle = title;
				alertbox.exitFunction = exitFunction;
				
				PopUpManager.addPopUp(alertbox, this, false);
				PopUpManager.centerPopUp(alertbox);
				
			}
			protected function defaultView(e:Event=null):void
			{
				trace("default view")
				this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_RESTART ));
				
			}
			protected function config(event:MouseEvent=null):void
			{
				if (loggedIn)
				{
					this.dispatchEvent( new ViewEvent( ViewEvent.LOCATION_CONFIG ));
					
				} else {
					showPassword("Please enter password", password, this.login)
				}
			}
			protected function login( e:Event=null ):void
			{
				this.loggedIn = true;
				config();
				
			}
			protected function showPassword(title:String="", password:String=null, exitFunction:Function=null):void
			{
				clearPopups();
				
				passwordbox = new PasswordAlert();
				passwordbox.windowTitle = title;
				passwordbox.password = password;
				passwordbox.exitFunction = exitFunction;
				
				PopUpManager.addPopUp(passwordbox, this, false);
				PopUpManager.centerPopUp(passwordbox);
				this.dispatchEvent( new ApplicationEvent( ApplicationEvent.POPUP_OPEN ) );
				centerPopups();
			}
			protected function getActivePopup():Array
			{
				var popups : Array = [];
				try
				{
					trace("*** CLEARING POPUPS");
					if (alertbox!=null)
					{
						popups.push(alertbox);
						
					}
					if (passwordbox!=null)
					{
						popups.push(passwordbox);
						
					}
					if (tcWindow!=null)
					{
						popups.push(tcWindow);
						
					}
					if (progressWindow!=null)
					{
						popups.push(progressWindow);
						
					}
					
					if (popupWait!=null)
					{
						popups.push(popupWait);
						
					}
				} catch (error:Error)
				{
				}
				return popups;
				
			}

			protected function centerPopups(e:Event=null):void
			{
				var p:Array = this.getActivePopup();
				for (var i:int=0;i<p.length;i++)
				{
					
					p[i].height *= scale;
					p[i].width *= scale;
					PopUpManager.centerPopUp(p[i]);
					p[i].height *= 1/scale;
					p[i].width *= 1/scale;
					p[i].scaleX = p[i].scaleY = scale;
					try {
						p[i].onresize();
					} catch (e:Error)
					{
						
					}
				}
				
			}


			protected function exitApplication(event:MouseEvent=null):void
			{
				NativeApplication.nativeApplication.exit();
			}
			protected function setBarCode(e:UserEvent):void
			{
				barcode = e.urn;
				trace("recorded barcode:"+barcode);
			}
			protected function setScore(e:UserEvent):void
			{
				score = e.score;
			}
			protected function setIsRegistered(e:UserEvent):void
			{
				this.isRegistered =  (e.userType)
				
				trace("recorded isRegistered: "+this.isRegistered.toString());
			}
			public function get isFacebookRegistered():Boolean
			{
				return this.isRegistered =="facebook";
			}
			public function get isStandardRegistered():Boolean
			{
				return this.isRegistered =="classic";
			}
			public function get activityTitle():String
			{
				trace("ApplicationType: "+this.ApplicationType+" "+APPLICATION_TYPE_PITSTOP)
				var activity:String = "";
				switch (this.ApplicationType)
				{
					case APPLICATION_TYPE_PITSTOP:
						activity = "Pit Stop Challenge";
						break;
					case APPLICATION_TYPE_SIMULATOR:
						activity "Simulator";
						break;
					default:
				}
				return activity;
			}
			
			protected function get ApplicationTypeNumber():int
			{
				switch (this.ApplicationType)
				{
					case APPLICATION_TYPE_PITSTOP:
						return 2;
						break;
					case APPLICATION_TYPE_SIMULATOR:
						return 1;
						break;
					case APPLICATION_TYPE_PHOTO:
						return 3;
						break;
					case APPLICATION_TYPE_HELMET:
						return 0;
						break;
					case APPLICATION_TYPE_GREENSCREEN:
						return 4;
						break;
					case APPLICATION_TYPE_GREENSCREEN_CELEBRATE:
						return 5;
						break;
					default:
						return -1;
				}
			}
			
			
			protected function setMarketingOptin( e:UserEvent ):void
			{
				trace("markting:"+e.optin_marketing);
				optin_marketing = e.optin_marketing
			}
			protected function setTermsOptin( e:UserEvent ):void
			{
				trace("terms:"+e.optin_terms);
				optin_terms = e.optin_terms;
			}
			
			protected function showDropshadow( e:Event = null ):void
			{
				
				hideDropshadow();
				if (scale<1)
				{
					borderHolder.filters = [ new spark.filters.DropShadowFilter(10,45, 0 ,.5, 10,10) ];
				}
			}

			protected function hideDropshadow( e:Event = null ):void
			{
				borderHolder.filters = [ ];
			}
			
			protected function setLogin( e:Event ):void
			{
				this.loggedIn = (e.type=="login");
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Parallel id="hideFX" duration="400">
			
			<mx:Blur blurXFrom="100.0" blurXTo="5.0" />
			<mx:Move xTo="{Stack.width}"/>
			
		</s:Parallel>
		
		<s:Parallel id="showFX" duration="400">
			
			<mx:Blur blurXFrom="100.0" blurXTo="0.0" />
			<mx:Move xFrom="{-Stack.width}"/>
			
		</s:Parallel>
		
	</fx:Declarations>
	
	
	
	<fx:Style source="assets/css/Fonts.css" />
	<fx:Style source="assets/css/Main.css" />
		
	<s:BorderContainer id="navigationbar" alpha="0" includeInLayout="false" borderAlpha="0" width="{this.stage.stageWidth}" height="90" click="fullscreen(event)">
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" alpha=".5"/>
				<s:GradientEntry color="0x000000" alpha=".1"/>
			</s:LinearGradient>
		</s:backgroundFill>
		<s:HGroup verticalAlign="middle" width="100%" height="90">
			<s:HGroup left="20" paddingLeft="20">
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/logo_live_small.png')" click="{defaultView()}"/>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="right" paddingRight="0" verticalAlign="middle" height="90">
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/nm-no-connection.gif')" id="connStatus" label="{ML.t('NO CONNECTION')}" color="0xFFFFFF" visible="false" />
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/home_logo.png')" click="{defaultView()}"/>
				<s:Button skinClass="skins.BasicButton" styleName="nav" label="{ML.t('Quit')}" click="exitApplication(event)" id="quitButton" color="0xFFFFFF" visible="{loggedIn}" includeInLayout="{loggedIn}" />
				<s:Button skinClass="skins.BasicButton" styleName="nav" icon="@Embed('assets/images/core/padlock.png')" click="config(event)" color="0xFFFFFF" />
			</s:HGroup>		
		</s:HGroup>
	</s:BorderContainer>
	
	<s:VGroup id="contentholder" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
		
	<s:Group id="holder" horizontalCenter="0" verticalCenter="0" width="1366" height="768">
		
		<s:BorderContainer id="borderHolder" width="100%" height="100%" borderVisible="false" backgroundImage="@Embed('./assets/images/Background.png')">
			<!--s:Image includeInLayout="false" alpha="0.5" x="0" y="0" top="0" left="0" right="1280" bottom="720"  source="@Embed('../guides/Instructions_1280x720px_Page_01.jpg')" width="1280" height="720" smooth="true" /-->	
		
			
			<mx:ViewStack id="Stack" height="100%" width="100%"  creationPolicy="all">
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:RegistrationScan id="RegisterView" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  height="100%" width="100%"  showEffect="{showFX}">
					<views:SelectUserType id="SelectUserType" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}" verticalAlign="top"  showEffect="{showFX}">
					<views:FaceBookAuth01 id="FaceBookAuth01" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:UserForm id="UserForm" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:SelectTeam id="SelectTeam" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:CameraCapture id="CameraCapture" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:ScoreCapture id="ScoreCapture" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:TaskCompleteCapture id="TaskCompleteCapture" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:GreenScreen id="GreenScreen" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:GreenScreen id="GreenScreenCelebrate" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:ApplicationType id="SelectApplication" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:Thankyou id="Thankyou" />
				</mx:VBox>
				<mx:VBox hideEffect="{hideFX}"  showEffect="{showFX}">
					<views:FaceBookLogoutOverride id="FaceBookLogoutOverride" />
				</mx:VBox>
				
			</mx:ViewStack>
		</s:BorderContainer>
		
	</s:Group>
	</s:VGroup>

</s:WindowedApplication>